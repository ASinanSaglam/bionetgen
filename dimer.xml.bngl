###
#@notes:'This is an atomized translation of an SBML model created on 12/06/2014. The original model has 7 molecules and 5 reactions. The translated model has 4 molecules and 5 rules'
###
begin model
begin parameters
	KMOLE 0.00166112956811
	kon 30.0
	koff 2.0
	rauto1 1.0
	rauto2 0.5
	CaMKIItot 1.0
	CaMtot 1.0
	#InitialConc1 nan
	#Group_AutoInhibitedCaMKII nan
	#Group_PhosphoT286 nan
	#Group_ActiveCaMKII nan
	#Group_AllCaM nan
	#Group_AllCaMKII nan
	#FracAutoInhibited nan
	#FracPhosphoCaMKII nan
	#FracActiveCaMKII nan
	T0 1.0
	T1 1.0
	N 12.0
	#FracAutoActivity nan
	alpha 1.0
	#koff_low nan
	#koff_high nan
	r_high 1.0
	r_low 0
end parameters
begin compartments
	cell  3  1e+15
end compartments
begin molecule types
	Kcp_Kou(c)
	Kcp_Kcp()
	C(kcp_kou,kou_kou)
	Kou_Kou(c,c)
end molecule types
begin seed species
	@cell:C(kcp_kou,kou_kou) 1.0* 1 * (1 / (1 * (1 / 602)))
	@cell:Kou_Kou(c,c) 0.5 *1.0* 1 * (1 / (1 * (1 / 602)))
end seed species
begin observables
	Species Kcu_Kou C(kou_kou!0,kcp_kou).Kou_Kou(c!0,c) #Kcu_Kou
	Species Kcu_Kcu C(kou_kou!0,kcp_kou).Kou_Kou(c!0,c!1).C(kou_kou!1,kcp_kou) #Kcu_Kcu
	Species Kcp_Kcu C(kcp_kou!0,kou_kou).Kcp_Kou(c!0) #Kcp_Kcu
	Species Kcp_Kou Kcp_Kou(c) #Kcp_Kou
	Species Kcp_Kcp Kcp_Kcp() #Kcp_Kcp
	Species C C(kcp_kou,kou_kou) #C
	Species Kou_Kou Kou_Kou(c,c) #Kou_Kou
end observables
begin functions
	functionRate0() = (if(if(C>0,if(Kou_Kou>0,(2 * kon * 0.00166112956810631 * C * 0.00166112956810631 * Kou_Kou + -(koff * 0.00166112956810631 * Kcu_Kou)) * 1 * (1 / KMOLE)/Kou_Kou,0)/C,0)>= 0,if(C>0,if(Kou_Kou>0,(2 * kon * 0.00166112956810631 * C * 0.00166112956810631 * Kou_Kou + -(koff * 0.00166112956810631 * Kcu_Kou)) * 1 * (1 / KMOLE)/Kou_Kou,0)/C,0),0))/2
	functionRate0m() = if(if(Kcu_Kou>0,(2 * kon * 0.00166112956810631 * C * 0.00166112956810631 * Kou_Kou + -(koff * 0.00166112956810631 * Kcu_Kou)) * 1 * (1 / KMOLE)/Kcu_Kou,0)< 0,-(if(Kcu_Kou>0,(2 * kon * 0.00166112956810631 * C * 0.00166112956810631 * Kou_Kou + -(koff * 0.00166112956810631 * Kcu_Kou)) * 1 * (1 / KMOLE)/Kcu_Kou,0)),0)
	functionRate1() = if(if(Kcu_Kou>0,if(C>0,(kon * 0.00166112956810631 * C * 0.00166112956810631 * Kcu_Kou + -(2 * koff * 0.00166112956810631 * Kcu_Kcu)) * 1 * (1 / KMOLE)/C,0)/Kcu_Kou,0)>= 0,if(Kcu_Kou>0,if(C>0,(kon * 0.00166112956810631 * C * 0.00166112956810631 * Kcu_Kou + -(2 * koff * 0.00166112956810631 * Kcu_Kcu)) * 1 * (1 / KMOLE)/C,0)/Kcu_Kou,0),0)
	functionRate1m() = (if(if(Kcu_Kcu>0,(kon * 0.00166112956810631 * C * 0.00166112956810631 * Kcu_Kou + -(2 * koff * 0.00166112956810631 * Kcu_Kcu)) * 1 * (1 / KMOLE)/Kcu_Kcu,0)< 0,-(if(Kcu_Kcu>0,(kon * 0.00166112956810631 * C * 0.00166112956810631 * Kcu_Kou + -(2 * koff * 0.00166112956810631 * Kcu_Kcu)) * 1 * (1 / KMOLE)/Kcu_Kcu,0)),0))/2
	functionRate2() = if(2 * rauto1 * 0.00166112956810631 * 1 * (1 / KMOLE)>= 0,2 * rauto1 * 0.00166112956810631 * 1 * (1 / KMOLE),0)
	functionRate2m() = if(if(Kcp_Kcu>0,2 * rauto1 * 0.00166112956810631 * Kcu_Kcu * 1 * (1 / KMOLE)/Kcp_Kcu,0)< 0,-(if(Kcp_Kcu>0,2 * rauto1 * 0.00166112956810631 * Kcu_Kcu * 1 * (1 / KMOLE)/Kcp_Kcu,0)),0)
	functionRate3() = if(if(Kcp_Kcu>0,(koff * 0.00166112956810631 * Kcp_Kcu + -(kon * 0.00166112956810631 * C * 0.00166112956810631 * Kcp_Kou)) * 1 * (1 / KMOLE)/Kcp_Kcu,0)>= 0,if(Kcp_Kcu>0,(koff * 0.00166112956810631 * Kcp_Kcu + -(kon * 0.00166112956810631 * C * 0.00166112956810631 * Kcp_Kou)) * 1 * (1 / KMOLE)/Kcp_Kcu,0),0)
	functionRate3m() = if(if(Kcp_Kou>0,if(C>0,(koff * 0.00166112956810631 * Kcp_Kcu + -(kon * 0.00166112956810631 * C * 0.00166112956810631 * Kcp_Kou)) * 1 * (1 / KMOLE)/C,0)/Kcp_Kou,0)< 0,-(if(Kcp_Kou>0,if(C>0,(koff * 0.00166112956810631 * Kcp_Kcu + -(kon * 0.00166112956810631 * C * 0.00166112956810631 * Kcp_Kou)) * 1 * (1 / KMOLE)/C,0)/Kcp_Kou,0)),0)
	functionRate4() = if(rauto2 * 0.00166112956810631 * 1 * (1 / KMOLE)>= 0,rauto2 * 0.00166112956810631 * 1 * (1 / KMOLE),0)
	functionRate4m() = if(if(Kcp_Kcp>0,rauto2 * 0.00166112956810631 * Kcp_Kcu * 1 * (1 / KMOLE)/Kcp_Kcp,0)< 0,-(if(Kcp_Kcp>0,rauto2 * 0.00166112956810631 * Kcp_Kcu * 1 * (1 / KMOLE)/Kcp_Kcp,0)),0)
	Group_ActiveCaMKII() = 0.00166112956810631 * Kcu_Kou + 2 * 0.00166112956810631 * Kcu_Kcu + 2 * 0.00166112956810631 * Kcp_Kcu + 0.00166112956810631 * Kcp_Kou + 2 * 0.00166112956810631 * Kcp_Kcp
	koff_low() = 2.2 * alpha
	InitialConc1() = 0.5 * CaMKIItot
	Group_PhosphoT286() = 0.00166112956810631 * Kcp_Kcu + 0.00166112956810631 * Kcp_Kou + 2 * 0.00166112956810631 * Kcp_Kcp
	koff_high() = 6.32 * alpha
	Group_AutoInhibitedCaMKII() = 2 * 0.00166112956810631 * Kou_Kou + 0.00166112956810631 * Kcu_Kou + 0.00166112956810631 * Kcp_Kou
	Group_AllCaMKII() = 2 * 0.00166112956810631 * Kou_Kou + 2 * 0.00166112956810631 * Kcu_Kou + 2 * 0.00166112956810631 * Kcu_Kcu + 2 * 0.00166112956810631 * Kcp_Kcu + 2 * 0.00166112956810631 * Kcp_Kou + 2 * 0.00166112956810631 * Kcp_Kcp
	Group_AllCaM() = 0.00166112956810631 * C + 0.00166112956810631 * Kcu_Kou + 2 * 0.00166112956810631 * Kcu_Kcu + 2 * 0.00166112956810631 * Kcp_Kcu + 0.00166112956810631 * Kcp_Kou + 2 * 0.00166112956810631 * Kcp_Kcp
	FracActiveCaMKII() = (0.00166112956810631 * Kcu_Kou + 2 * 0.00166112956810631 * Kcu_Kcu + 2 * 0.00166112956810631 * Kcp_Kcu + 0.00166112956810631 * Kcp_Kou + 2 * 0.00166112956810631 * Kcp_Kcp) * (1 / CaMKIItot)
	FracAutoInhibited() = (2 * 0.00166112956810631 * Kou_Kou + 0.00166112956810631 * Kcu_Kou + 0.00166112956810631 * Kcp_Kou) * (1 / CaMKIItot)
	FracPhosphoCaMKII() = (0.00166112956810631 * Kcp_Kcu + 0.00166112956810631 * Kcp_Kou + 2 * 0.00166112956810631 * Kcp_Kcp) * (1 / CaMKIItot)
	FracAutoActivity() = 0.8 * ((0.00166112956810631 * Kcp_Kcu + 0.00166112956810631 * Kcp_Kou + 2 * 0.00166112956810631 * Kcp_Kcp) * (1 / CaMKIItot))
end functions
begin reaction rules
	R1: Kou_Kou(c,c) + C(kcp_kou,kou_kou) <-> C(kou_kou!0,kcp_kou).Kou_Kou(c!0,c) functionRate0(),functionRate0m()
	R2: C(kcp_kou,kou_kou) + C(kou_kou!0,kcp_kou).Kou_Kou(c!0,c) <-> C(kou_kou!0,kcp_kou).Kou_Kou(c!0,c!1).C(kou_kou!1,kcp_kou) functionRate1(),functionRate1m()
	R5: C(kou_kou!0,kcp_kou).Kou_Kou(c!0,c!1).C(kou_kou!1,kcp_kou) <-> C(kcp_kou!0,kou_kou).Kcp_Kou(c!0) functionRate2(),functionRate2m()
	R6: C(kcp_kou!0,kou_kou).Kcp_Kou(c!0) <-> C(kcp_kou,kou_kou) + Kcp_Kou(c) functionRate3(),functionRate3m()
	R7: C(kcp_kou!0,kou_kou).Kcp_Kou(c!0) <-> Kcp_Kcp() functionRate4(),functionRate4m()
end reaction rules
end model
