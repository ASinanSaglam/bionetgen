# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MM', [dirname(__file__)])
        except ImportError:
            import _MM
            return _MM
        if fp is not None:
            try:
                _mod = imp.load_module('_MM', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _MM = swig_import_helper()
    del swig_import_helper
else:
    import _MM
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _MM.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MM.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _MM.intp_assign(self, *args)
    def value(self): return _MM.intp_value(self)
    def cast(self): return _MM.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _MM.intp_frompointer
    if _newclass:frompointer = staticmethod(_MM.intp_frompointer)
intp_swigregister = _MM.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _MM.intp_frompointer(*args)
intp_frompointer = _MM.intp_frompointer


def new_intp1():
  return _MM.new_intp1()
new_intp1 = _MM.new_intp1

def copy_intp1(*args):
  return _MM.copy_intp1(*args)
copy_intp1 = _MM.copy_intp1

def delete_intp1(*args):
  return _MM.delete_intp1(*args)
delete_intp1 = _MM.delete_intp1

def intp1_assign(*args):
  return _MM.intp1_assign(*args)
intp1_assign = _MM.intp1_assign

def intp1_value(*args):
  return _MM.intp1_value(*args)
intp1_value = _MM.intp1_value

def int_to_uint(*args):
  return _MM.int_to_uint(*args)
int_to_uint = _MM.int_to_uint

def new_doubleArray(*args):
  return _MM.new_doubleArray(*args)
new_doubleArray = _MM.new_doubleArray

def delete_doubleArray(*args):
  return _MM.delete_doubleArray(*args)
delete_doubleArray = _MM.delete_doubleArray

def doubleArray_getitem(*args):
  return _MM.doubleArray_getitem(*args)
doubleArray_getitem = _MM.doubleArray_getitem

def doubleArray_setitem(*args):
  return _MM.doubleArray_setitem(*args)
doubleArray_setitem = _MM.doubleArray_setitem
class doubleArrayClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArrayClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArrayClass, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _MM.new_doubleArrayClass(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _MM.delete_doubleArrayClass
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _MM.doubleArrayClass___getitem__(self, *args)
    def __setitem__(self, *args): return _MM.doubleArrayClass___setitem__(self, *args)
    def cast(self): return _MM.doubleArrayClass_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _MM.doubleArrayClass_frompointer
    if _newclass:frompointer = staticmethod(_MM.doubleArrayClass_frompointer)
doubleArrayClass_swigregister = _MM.doubleArrayClass_swigregister
doubleArrayClass_swigregister(doubleArrayClass)

def doubleArrayClass_frompointer(*args):
  return _MM.doubleArrayClass_frompointer(*args)
doubleArrayClass_frompointer = _MM.doubleArrayClass_frompointer

__N_PARAMETERS__ = _MM.__N_PARAMETERS__
__N_EXPRESSIONS__ = _MM.__N_EXPRESSIONS__
__N_OBSERVABLES__ = _MM.__N_OBSERVABLES__
__N_RATELAWS__ = _MM.__N_RATELAWS__
__N_SPECIES__ = _MM.__N_SPECIES__

def check_flag(*args):
  return _MM.check_flag(*args)
check_flag = _MM.check_flag

def calc_expressions(*args):
  return _MM.calc_expressions(*args)
calc_expressions = _MM.calc_expressions

def calc_observables(*args):
  return _MM.calc_observables(*args)
calc_observables = _MM.calc_observables

def calc_ratelaws(*args):
  return _MM.calc_ratelaws(*args)
calc_ratelaws = _MM.calc_ratelaws

def calc_species_deriv(*args):
  return _MM.calc_species_deriv(*args)
calc_species_deriv = _MM.calc_species_deriv

def initialize_species(*args):
  return _MM.initialize_species(*args)
initialize_species = _MM.initialize_species

def integrate(*args):
  return _MM.integrate(*args)
integrate = _MM.integrate

def bng_protocol(*args):
  return _MM.bng_protocol(*args)
bng_protocol = _MM.bng_protocol
# This file is compatible with both classic and new-style classes.


